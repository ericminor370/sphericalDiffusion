% Create a logical image of a circle with specified
% diameter, center, and image size.
% First create the image.
startData = load('startData');
distRadii = sort(startData.radii);
mult = 1/startData.sFract;
res = 10;
imgSizeTheta = 180*res;
imgSizePhi = 360*res;
fImage = zeros(imgSizeTheta,imgSizePhi,'logical');
bubbleRadius = startData.bubbleRadius;
centers=[];
radii=[];

%imageSizeX = radius*2;
%imageSizeY = radius*2;
%[columnsInImage rowsInImage] = meshgrid(1:imgSize, 1:imgSize);
% Next create the circle in the image.
%centerX = radius;
%centerY = radius;

%circlePixels = (rowsInImage - centerY).^2 ...
%    + (columnsInImage - centerX).^2 <= radius.^2;
% circlePixels is a 2D "logical" array.
% Now, display it.
%imshow(circlePixels) ;
%colormap([0 0 0; 1 1 1]);
%title('Binary image of a circle');
fail = 0;
%while fail~=1
for i=1:3
    [fImage,centers,radii,fail] = addIsland(fImage,400,centers,radii,imgSizeTheta,imgSizePhi,res,bubbleRadius);
end
    %[fImage,centers,radii,fail] = addIsland(fImage,100,centers,radii,imgSize);
%end
%{
fail = 0;
while fail~=1
    [fImage,centers,radii,fail] = addIsland(fImage,50,centers,radii,imgSize);
    %[fImage,centers,radii,fail] = addIsland(fImage,100,centers,radii,imgSize);
end
fail = 0;
while fail~=1
    [fImage,centers,radii,fail] = addIsland(fImage,20,centers,radii,imgSize);
    %[fImage,centers,radii,fail] = addIsland(fImage,100,centers,radii,imgSize);
end
fail = 0;
while fail~=1
    [fImage,centers,radii,fail] = addIsland(fImage,10,centers,radii,imgSize);
    %[fImage,centers,radii,fail] = addIsland(fImage,100,centers,radii,imgSize);
end

%}

imshow(fImage)

function [fImage,centers,radii,fail] = addIsland(fImage,radius,centers,radii,imgSizeTheta,imgSizePhi,res,bubbleRadius)
    valid = ones(imgSizeTheta,imgSizePhi,'logical');
    %{
    for i=1:imgSizeTheta
        for j=1:imgSizePhi
            if i<radius || j<radius || imgSizeTheta-i<radius || imgSizePhi-j<radius
                valid(i,j) = 0;
            end
        end
    end
    %}
    numCircles = length(radii);
    for i=1:numCircles
        valid = ~drawCircleSphere(~valid,imgSizeTheta,imgSizePhi,centers(i,:),radii(i)+radius+1,res,bubbleRadius);
    end
    %imshow(valid)
    numValid = sum(sum(valid));
    if numValid>0
        %imshow(valid)
        validPixels = zeros(numValid,2);
        index = 1;
        for i=1:imgSizeTheta
            for j=1:imgSizePhi
                if valid(i,j) == 1
                    validPixels(index,1) = i;
                    validPixels(index,2) = j;
                    index=index+1;
                end
            end
        end

        seed = datasample(validPixels,1,1);


        fImage = drawCircleSphere(fImage,imgSizeTheta,imgSizePhi,seed,radius,res,bubbleRadius);
        centers = [centers;seed];
        radii = [radii;radius];
        fail = 0;
    else
        fail = 1;
    end

end

function fImage = drawCircleSphere(fImage,imgSizeTheta,imgSizePhi,seed,radius,res,bubbleRadius)

       for i=1:imgSizeTheta
            for j=1:imgSizePhi
                if geodesicSphericalDegRes(seed(1),seed(2),i,j,bubbleRadius,res)<radius
                    fImage(i,j) = 1;
                end
            end
        end

end

function [lat,lon] = sToLL(particles)
    lat = (360/(2*pi))*(particles(:,1)-pi/2);
    lon = (360/(2*pi))*(particles(:,2) -pi);
end

function dist = geodesicSpherical(theta1,phi1,theta2,phi2, bubbleRadius)
    latitude1 = theta1-pi/2;
    longitude1 = phi1 -pi;
    latitude2 = theta2-pi/2;
    longitude2 = phi2 -pi;
    dist = geodesicll(latitude1,longitude1,latitude2,longitude2, bubbleRadius);
end

function dist = geodesicll(latitude1,longitude1,latitude2,longitude2, bubbleRadius)

    [a,c,dlat,dlon]=haversine(latitude1,longitude1,latitude2,longitude2);
    dist = bubbleRadius*c;
end

function [a,c,dlat,dlon]=haversine(lat1,lon1,lat2,lon2)
% HAVERSINE_FORMULA.AWK - converted from AWK 
    dlat = lat2-lat1;
    dlon = lon2-lon1;
    lat1 = lat1;
    lat2 = lat2;
    a = (sin(dlat./2)).^2 + cos(lat1) .* cos(lat2) .* (sin(dlon./2)).^2;
    c = 2 .* asin(sqrt(a));
    %arrayfun(@(x) printf("distance: %.4f km\n",6372.8 * x), c);
end

function dist = geodesicSphericalDegRes(theta1,phi1,theta2,phi2, bubbleRadius,res)
    theta1 = radians(theta1/res);
    phi1 = radians(phi1/res);
    theta2 = radians(theta2/res);
    phi2 = radians(phi2/res);
    
    dist = geodesicSpherical(theta1,phi1,theta2,phi2, bubbleRadius);
end

function rad = radians(degree) 
% degrees to radians
    rad = degree .* pi / 180;
end